
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require



#include "raycommon.glsl"
#include "host_device.h"
#include "random.glsl"

// clang-format off
layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 0, binding = eTlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = eOutImage, rgba32f) uniform image2D image;
layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalUniforms uni; };
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };
// clang-format on

const int NBSAMPLES = 1;

void main()
{
  // Initialize the random number
  uint seed = InitRandomSeed(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pcRay.frame);
  prd.RandomSeed = seed;

  vec3 pixelColor = vec3(0);
  vec3 hitValue = vec3(1);
  for(int smpl = 0; smpl < NBSAMPLES; smpl++){

      // gaussian AA
      vec2 rndvec = randomGaussian(seed);
      float r1 = rndvec.x;
      float r2 = rndvec.y;

      // square AA
      //float r1 = rnd(seed);
      //float r2 = rnd(seed);

      // Subpixel jitter: send the ray through a different position inside the pixel
      // each time, to provide antialiasing.
      vec2 subpixel_jitter = pcRay.frame == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);
      const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) + 0.375 *subpixel_jitter;
      const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
      vec2       d           = inUV * 2.0 - 1.0;

      //defocus blur
      float Aperture = pcRay.camAperture;
      float focus_dist = pcRay.focusDist;
      vec2 offset = (Aperture/2) * RandomInUnitDisk(prd.RandomSeed);
      vec4 origin    = uni.viewInverse * vec4(offset, 0, 1);
      vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);
      vec4 direction = uni.viewInverse * vec4(normalize(target.xyz*focus_dist - vec3(offset, 0)), 0);

      uint  rayFlags = gl_RayFlagsOpaqueEXT;
      float tMin     = 0.001;
      float tMax     = 10000.0;

      prd.depth       = 0;
      prd.hitValue    = vec3(0);
      prd.attenuation = vec3(1.f, 1.f, 1.f);
      prd.done        = 1;
      prd.rayOrigin   = origin.xyz;
      prd.rayDir      = direction.xyz;

      // trace path
      hitValue = vec3(1);
      for(;;) {

        if(prd.depth == 7) {
          hitValue = vec3(0)*hitValue;
          break;
        }

        traceRayEXT(topLevelAS,     // acceleration structure
                    rayFlags,       // rayFlags
                    0xFF,           // cullMask
                    0,              // sbtRecordOffset
                    0,              // sbtRecordStride
                    0,              // missIndex
                    origin.xyz,     // ray origin
                    tMin,           // ray min range
                    direction.xyz,  // ray direction
                    tMax,           // ray max range
                    0               // payload (location = 0)
        );
        hitValue *= prd.hitValue;

        prd.depth++;
        if(prd.done == 1)
          break;

        origin.xyz    = prd.rayOrigin;
        direction.xyz = prd.rayDir;
        prd.done      = 1;  // Will stop if absorb or hit a ligth
      }
    pixelColor += hitValue; 
  }
  pixelColor = pixelColor / NBSAMPLES;

  // Do accumulation over time
  if(pcRay.frame > 0)
  {
    float a         = 1.0f / float(pcRay.frame + 1);
    vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, pixelColor, a), 1.f));
  }
  else
  {
    // First frame, replace the value in the buffer
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 1.f));
  }

}
